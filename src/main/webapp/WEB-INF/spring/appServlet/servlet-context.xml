<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 사용자의 요청과 관련된 bean을 등록하는 설정파일 -->
	<!-- controller, view, intercepter, 정적데이터 요청(resources) -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 이거없으면 무조건 404에러 발생 -->
	<annotation-driven />

	<!-- /resources 로 요청이 들어왔을 때, webapp 아래의 resources 폴더로 매핑 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**"
		location="/resources/" />

	<!-- setViewName() 값 앞 뒤에 붙일 경로 지정 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- 빈으로 등록하기 위해서 스프링이 객체를 탐색할 영역 -->
	<context:component-scan	base-package="com.hao.malgae" />

	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<beans:bean class="common.interceptor.AuthInterceptor"></beans:bean>
		</interceptor>
	</interceptors>

	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>


	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<!-- 이미 실행되고 있는 트랜잭션이 있다면, 해당 트랜젝션에 포함 만약에 없다면 새로운 트랜잭션을 생성 -->

		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<aop:config>
		<aop:pointcut
			expression="execution(* com.hao.malgae..*.*ServiceImpl.*(..))"
			id="requiredTx" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="requiredTx" />
	</aop:config>


	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000"></beans:property>
		<beans:property name="maxInMemorySize"
			value="100000000"></beans:property>
	</beans:bean>

</beans:beans>
